# ---------------------------------------------------------
# * Model Objects
# ---------------------------------------------------------

type User {
  id:                         ID!
  fullName:                   String!
  email:                      String!
  username:                   String!
  password:                   String!
  passwordResetToken:         String
  passwordResetTokenExpiry:   String
  image:                      String
  imagePublicId:              String
  coverImage:                 String
  coverImagePublicId:         String
  emailVerified:              Boolean!
  online:                     Boolean!
  lastActiveAt:               String!

  createdAt:                  String!
  updatedAt:                  String!
}

# ---------------------------------------------------------
# * Input Objects
# ---------------------------------------------------------

input SignInInput {
  emailOrUsername:            String!
  password:                   String!
}

input SignUpInput {
  email:                      String!
  username:                   String!
  fullName:                   String!
  password:                   String!
  autoSignIn:                 Boolean!
}

input RequestPasswordResetInput {
  email:                      String
  username:                   String
}

input ResetPasswordInput {
  token:                      String!
  email:                      String!
  password:                   String!
}

input UpdateUserPasswordInput {
  password:                   String!
  newPassword:                String!
}

input UpdateUserInfoInput {
  fullName:                   String
}

input UpdateUserPhotoInput {
  image:                      Upload
  isCover:                    Boolean
}

# ---------------------------------------------------------
# * Return Payloads
# ---------------------------------------------------------

type UserPayload {
  id:                         ID
  fullName:                   String
  email:                      String
  username:                   String
  image:                      String
  imagePublicId:              String
  coverImage:                 String
  coverImagePublicId:         String
  online:                     Boolean
  lastActiveAt:               String

  createdAt:                  String
  updatedAt:                  String
}

type UsersPayload {
  count:                      Int
  users:                     [UserPayload]
}

type IsUserOnlinePayload {
  userId:                     ID
  online:                     Boolean
  lastActiveAt:               String
}

type UpdateUserPhotoResponse {
  image:                      String
  imagePublicId:              String
  coverImage:                 String
  coverImagePublicId:         String
}

# ---------------------------------------------------------
# * Queries
# ---------------------------------------------------------

type Query {
  # Get the current logged in user
  getAuthUser:                                                  UserPayload

  # Get user by username or id
  getUser(username: String, id: ID):                            UserPayload

  # Get all users except followed users and authUser
  getUsers(skip: Int, limit: Int):                              UsersPayload

  # Search users by username or fullName
  searchUsers(searchQuery: String!, skip: Int!, limit: Int!):  [UserPayload]

  # Get Suggestted people for authUser
  suggestUsers:                                                [UserPayload]

  verifyPasswordResetToken(token: String!):                     Boolean
}

# ---------------------------------------------------------
# * Mutations
# ---------------------------------------------------------

type Mutation {
  signin(input: SignInInput!):                                  Boolean

  signup(input: SignUpInput!):                                  Boolean

  requestPasswordReset(input: RequestPasswordResetInput!):      Boolean

  resetPassword(input: ResetPasswordInput!):                    Boolean

  updateUserPassword(input: UpdateUserPasswordInput!):          Boolean

  updateUserInfo(input: UpdateUserInfoInput!):                  UserPayload

  # Upload user Profile or Cover photo
  updateUserPhoto(input: UpdateUserPhotoInput!):                UpdateUserPhotoResponse!
}

# ---------------------------------------------------------
# * Subscriptions
# ---------------------------------------------------------

type Subscription {
  # Subscribe to is user online event
  isUserOnline(userId: ID!):                                  IsUserOnlinePayload
}
