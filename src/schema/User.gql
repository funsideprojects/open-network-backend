# ---------------------------------------------------------
# * Model Objects
# ---------------------------------------------------------

type User {
  id:                         ID!
  fullName:                   String!
  email:                      String!
  emailVerified:              Boolean!
  username:                   String!
  password:                   String!
  passwordResetToken:         String
  image:                      String
  imagePublicId:              String
  coverImage:                 String
  coverImagePublicId:         String
  visibleToEveryone:          Boolean!
  online:                     Boolean!
  displayOnlineStatus:        Boolean!
  lastActiveAt:               Float!

  createdAt:                  Float!
  updatedAt:                  Float!
}

# ---------------------------------------------------------
# * Input Objects
# ---------------------------------------------------------

input SignInInput {
  emailOrUsername:            String!
  password:                   String!
}

input SignUpInput {
  email:                      String!
  username:                   String!
  fullName:                   String!
  password:                   String!
  autoSignIn:                 Boolean!
}

input VerifyUserEmailInput {
  token:                      String!
}

input RequestPasswordResetInput {
  email:                      String
  username:                   String
}

input ResetPasswordInput {
  token:                      String!
  password:                   String!
}

input UpdateUserPasswordInput {
  password:                   String!
  newPassword:                String!
}

input UpdateUserInfoInput {
  email:                      String
  fullName:                   String
  visibleToEveryone:          Boolean
  displayOnlineStatus:        Boolean
}

input UpdateUserPhotoInput {
  image:                      Upload
  isCover:                    Boolean
}

# ---------------------------------------------------------
# * Return Payloads
# ---------------------------------------------------------

type AuthUserPayload {
  id:                         ID
  fullName:                   String
  email:                      String
  emailVerified:              Boolean       # Private, For authUser only
  username:                   String
  image:                      String
  imagePublicId:              String
  coverImage:                 String
  coverImagePublicId:         String
  visibleToEveryone:          Boolean       # Private, For authUser only
  online:                     Boolean
  displayOnlineStatus:        Boolean       # Private, For authUser only
  lastActiveAt:               Float

  createdAt:                  Float
  updatedAt:                  Float
}

type UserPayload {
  id:                         ID
  fullName:                   String
  email:                      String
  username:                   String
  image:                      String
  imagePublicId:              String
  coverImage:                 String
  coverImagePublicId:         String
  online:                     Boolean
  lastActiveAt:               Float

  createdAt:                  Float
}

type UsersPayload {
  count:                      Int
  users:                     [UserPayload]
}

type IsUserOnlinePayload {
  userId:                     ID
  online:                     Boolean
  lastActiveAt:               Float
}

type UpdateUserPhotoResponse {
  image:                      String
  imagePublicId:              String
  coverImage:                 String
  coverImagePublicId:         String
}

# ---------------------------------------------------------
# * Queries
# ---------------------------------------------------------

type Query {
  # Get the current signed in user
  getAuthUser:                                                          AuthUserPayload

  # Get user by username OR id
  getUser(username: String, id: ID):                                    UserPayload

  # Get users except following and authUser
  getUsers(skip: Int, limit: Int):                                      UsersPayload

  # Search users by username or fullName
  searchUsers(searchQuery: String!, skip: Int!, limit: Int!):           UsersPayload

  # Get suggestted users for authUser
  suggestUsers:                                                        [UserPayload]

  verifyToken(token: String!):                                          Boolean

  silentRenew:                                                          Boolean
}

# ---------------------------------------------------------
# * Mutations
# ---------------------------------------------------------

type Mutation {
  signin(input: SignInInput!):                                          Boolean

  signup(input: SignUpInput!):                                          Boolean

  requestVerificationEmail:                                             Boolean

  verifyUserEmail(input: VerifyUserEmailInput!):                        Boolean

  requestPasswordReset(input: RequestPasswordResetInput!):              Boolean

  resetPassword(input: ResetPasswordInput!):                            Boolean

  updateUserPassword(input: UpdateUserPasswordInput!):                  Boolean

  updateUserInfo(input: UpdateUserInfoInput!):                          UserPayload

  # Upload user Profile or Cover photo
  updateUserPhoto(input: UpdateUserPhotoInput!):                        UpdateUserPhotoResponse!
}

# ---------------------------------------------------------
# * Subscriptions
# ---------------------------------------------------------

type Subscription {
  # Subscribe to is user online event
  isUserOnline(userId: ID!):                                  IsUserOnlinePayload
}
