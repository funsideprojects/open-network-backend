# ---------------------------------------------------------
# * Model Objects
# ---------------------------------------------------------

type User {
  id:                         ID!
  fullName:                   String!
  email:                      String!
  username:                   String!
  password:                   String!
  passwordResetToken:         String
  passwordResetTokenExpiry:   String
  image:                      String
  imagePublicId:              String
  coverImage:                 String
  coverImagePublicId:         String
  isOnline:                   Boolean!
  lastActiveAt:               String!

  createdAt:                  String!
  updatedAt:                  String!
}

# ---------------------------------------------------------
# * Input Objects
# ---------------------------------------------------------

input SignInInput {
  emailOrUsername:            String!
  password:                   String!
}

input SignUpInput {
  email:                      String!
  username:                   String!
  fullName:                   String!
  password:                   String!
}

input RequestPasswordResetInput {
  email:                      String!
}

input ResetPasswordInput {
  email:                      String!
  password:                   String!
}

input UpdateUserInfoInput {
  fullName:                   String
}

input UpdateUserPhotoInput {
  image:                      Upload
  isCover:                    Boolean
}

# ---------------------------------------------------------
# * Return Payloads
# ---------------------------------------------------------

type UserPayload {
  id:                         ID
  fullName:                   String
  email:                      String
  username:                   String
  image:                      String
  imagePublicId:              String
  coverImage:                 String
  coverImagePublicId:         String
  isOnline:                   Boolean
  lastActiveAt:               String

  createdAt:                  String
  updatedAt:                  String
}

type UsersPayload {
  count:                      Int
  users:                     [UserPayload]
}

type IsUserOnlinePayload {
  userId:                     ID
  isOnline:                   Boolean
  lastActiveAt:               String
}

type SuccessMessage {
  message:                    String!
}

type UpdateUserPhotoResponse {
  image:                      String
  imagePublicId:              String
  coverImage:                 String
  coverImagePublicId:         String
}

# ---------------------------------------------------------
# * Queries
# ---------------------------------------------------------

type Query {
  # Get the currently logged in user
  getAuthUser:                                                  UserPayload

  # Get user by username or by id
  getUser(username: String, id: ID):                            UserPayload

  # Get all users except followed users and authUser
  getUsers(skip: Int, limit: Int):                              UsersPayload

  # Search users by username or fullName
  searchUsers(searchQuery: String!, skip: Int!, limit: Int!):  [UserPayload]

  # Get Suggestted people for authUser
  suggestPeople:                                               [UserPayload]

  # Verify reset password token
  verifyResetPasswordToken(email: String, token: String!):      Boolean
}

# ---------------------------------------------------------
# * Mutations
# ---------------------------------------------------------

type Mutation {
  # Sign in user
  signin(input: SignInInput!):                                  Boolean

  # Sign up user
  signup(input: SignUpInput!):                                  Boolean

  # Request reset password
  requestPasswordReset(input: RequestPasswordResetInput!):      String

  # Reset user password
  resetPassword(input: ResetPasswordInput!):                    Boolean

  # Update user info
  updateUserInfo(input: UpdateUserInfoInput!):                  UserPayload

  # Upload user Profile or Cover photo
  updateUserPhoto(input: UpdateUserPhotoInput!):                UpdateUserPhotoResponse!
}

# ---------------------------------------------------------
# * Subscriptions
# ---------------------------------------------------------

type Subscription {
  # Subscribe to is user online event
  isUserOnline(userId: ID!):                                  IsUserOnlinePayload
}
