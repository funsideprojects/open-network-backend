# ---------------------------------------------------------
# *_: Model Objects
# ---------------------------------------------------------
type User {
  id:                         ID!
  fullName:                   String!
  email:                      String!
  username:                   String!
  password:                   String!
  passwordResetToken:         String
  passwordResetTokenExpiry:   String
  image:                      String
  imagePublicId:              String
  coverImage:                 String
  coverImagePublicId:         String
  isOnline:                   Boolean!
  lastActiveAt:               String!

  createdAt:                  String!
  updatedAt:                  String
}

type File {
  filename:                   String
  mimetype:                   String
  encoding:                   String
}

# ---------------------------------------------------------
# *_: Input Objects
# ---------------------------------------------------------
input SignInInput {
  emailOrUsername:            String!
  password:                   String!
}

input SignUpInput {
  email:                      String!
  username:                   String!
  fullName:                   String!
  password:                   String!
}

input RequestPasswordResetInput {
  email:                      String!
}

input ResetPasswordInput {
  email:                      String!
  token:                      String!
  password:                   String!
}

input UpdateUserInfoInput {
  fullName:                   String
}

input UpdateUserPhotoInput {
  image:                      Upload!
  isCover:                    Boolean
}

# ---------------------------------------------------------
# *_: Return Payloads
# ---------------------------------------------------------
type UserPayload {
  id:                         ID
  fullName:                   String
  email:                      String
  username:                   String
  image:                      String
  imagePublicId:              String
  coverImage:                 String
  coverImagePublicId:         String
  isOnline:                   Boolean
  lastActiveAt:               String

  createdAt:                  String
  updatedAt:                  String
}

type UsersPayload {
  users:                     [UserPayload]
  count:                      Int!
}

type IsUserOnlinePayload {
  userId:                     ID
  isOnline:                   Boolean
  lastActiveAt:               String
}

type Token {
  token:                      String!
}

type SuccessMessage {
  message:                    String!
}

type UpdateUserPhotoResponse {
  image:                      String
  imagePublicId:              String
  coverImage:                 String
  coverImagePublicId:         String
}

# ---------------------------------------------------------
# *_: Queries
# ---------------------------------------------------------
type Query {
  # DONE: Get the currently logged in user
  getAuthUser:                                              UserPayload

  # DONE: Get user by username or by id
  getUser(username: String, id: ID):                        UserPayload

  # DONE: Get all users except followed users and authUser
  getUsers(skip: Int, limit: Int):                          UsersPayload

  # DONE: Searche users by username or fullName
  searchUsers(searchQuery: String!):                       [UserPayload]

  # DONE: Get Suggestted people for authUser
  suggestPeople:                                           [UserPayload]

  # DONE: Verify reset password token
  verifyResetPasswordToken(email: String, token: String!):  SuccessMessage
}

# ---------------------------------------------------------
# *_: Mutations
# ---------------------------------------------------------
type Mutation {
  # DONE: Sign in user
  signin(input: SignInInput!):                              Token

  # DONE: Sign up user
  signup(input: SignUpInput!):                              Token

  # DONE: Request reset password
  requestPasswordReset(input: RequestPasswordResetInput!):  SuccessMessage

  # DONE: Reset user password
  resetPassword(input: ResetPasswordInput!):                Token

  # DONE: Update user info
  updateUserInfo(input: UpdateUserInfoInput!):              UserPayload

  # DONE: Upload user Profile or Cover photo
  updateUserPhoto(input: UpdateUserPhotoInput!):            UpdateUserPhotoResponse!
}

# ---------------------------------------------------------
# *_: Subscriptions
# ---------------------------------------------------------
type Subscription {
  # DONE: Subscribe to is user online event
  isUserOnline(userId: ID!):                                IsUserOnlinePayload
}
